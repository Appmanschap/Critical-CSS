{"version":3,"sources":["../src/index.js","../src/config.js"],"sourcesContent":["import { URL } from 'url';\nimport * as core from '@actions/core';\nimport { getInput } from './config.js';\nimport { generate } from 'critical';\nimport nodeRsync from 'rsyncwrapper';\nimport fs from 'fs';\nimport * as ChromeLauncher from 'chrome-launcher';\n\nconst cleanOldCriticalFiles = async (options) => {\n  core.startGroup('Clean up');\n  fs.mkdirSync(options.src);\n  nodeRsync(\n    options,\n    (error, stdout, stderr, cmd) => {\n      if (error) {\n        core.error(error);\n        core.error(stdout);\n        core.error(stderr);\n        core.error(cmd);\n        process.exit(1);\n      } else {\n        core.info('Rsync cleanup finished');\n        core.info(stdout);\n      }\n    }\n  );\n  core.endGroup();\n};\n\nconst generateCriticalCSS = async (input) => {\n  for (let page of input.paths) {\n    console.log(page);\n    const pageUrl = new URL(`${input.baseUrl}${page.url}`);\n    const criticalDest =\n      input.destinationPath + page.template + '_critical.min.css';\n\n    core.info(`Generating critical CSS: ${pageUrl.href} -> ${criticalDest}`);\n\n    async function getBrowser() {\n      return ChromeLauncher.launch({\n        chromeFlags: ['--headless=new']\n      });\n    }\n\n    await generate({\n      src: pageUrl.href,\n      target: criticalDest,\n      inline: false,\n      penthouse: {\n        chromeFlags: {}\n      },\n      ignore: [],\n      //   minify: true,\n      dimensions: [\n        {\n          width: 375,\n          height: 667\n        },\n        {\n          width: 1440,\n          height: 1280\n        }\n      ]\n    });\n  }\n};\n\nconst main = async () => {\n  core.startGroup('Action config');\n  const input = getInput();\n  process.env.PUPPETEER_EXECUTABLE_PATH = input.browserPath;\n\n  let options = {\n    src: input.destinationPath,\n    dest: `${input.syncOptions.sshHost}:${input.syncOptions.targetDir}`,\n    args: ['-azhcvv'],\n    delete: true,\n    ssh: true,\n    port: input.syncOptions.sshPort\n  };\n\n  if (input.syncOptions.sshPrivateKeyPath.length) {\n    options['privateKey'] = input.syncOptions.sshPrivateKeyPath;\n  }\n\n  core.endGroup(); // Action config\n\n  await cleanOldCriticalFiles(options);\n\n  core.startGroup('Start Critical CSS');\n  await generateCriticalCSS(input);\n  core.endGroup();\n\n  if (input.shouldSync) {\n    core.startGroup(\n      `Starting Rsync ${input.destinationPath} -> ${input.syncOptions.targetDir}`\n    );\n\n    nodeRsync(\n      options,\n      (error, stdout, stderr, cmd) => {\n        if (error) {\n          core.error(error);\n          core.error(stdout);\n          core.error(stderr);\n          core.error(cmd);\n          process.exit(1);\n        } else {\n          core.info('Rsync finished');\n          core.info(stdout);\n        }\n      }\n    );\n    core.endGroup();\n  }\n};\n\nmain()\n  .catch((err) => {\n    core.setFailed(err.message);\n    process.exit(1);\n  })\n  .then(() => core.debug(`done in ${process.uptime()}s`));\n","import core from '@actions/core';\nimport fs from 'fs';\nimport { resolve } from 'path';\nimport { Launcher as chromeLauncher } from 'chrome-launcher';\n\nexport function getInput() {\n  let serverBaseUrl = core.getInput('serverBaseUrl');\n  if (!serverBaseUrl) {\n    // Fail and exit\n    core.setFailed(`Need a valid base url.`);\n    process.exit(1);\n  }\n\n  // Make sure we end with a '/'\n  if (serverBaseUrl.substr(-1) !== '/') {\n    serverBaseUrl += '/';\n  }\n\n  const destinationPath = core.getInput('destinationPath');\n  if (!destinationPath) {\n    // Fail and exit\n    core.setFailed(`Need a valid destination path.`);\n    process.exit(1);\n  }\n\n  const configPath = core.getInput('configPath')\n    ? resolve(core.getInput('configPath'))\n    : null;\n\n  if (!configPath) {\n    // Fail and exit\n    core.setFailed(`Config file not found or invalid configPath.`);\n    process.exit(1);\n  }\n\n  const config = JSON.parse(fs.readFileSync(configPath));\n  if (!config.length) {\n    core.setFailed(`Invalid config.`);\n    process.exit(1);\n  }\n\n  const browserPath = chromeLauncher.getFirstInstallation();\n\n\n  const shouldSync = core.getInput('sync');\n\n  let syncOptions = {};\n  if (shouldSync) {\n    const sshPrivateKeyPath = core.getInput('sshPrivateKeyPath');\n    const sshHost = core.getInput('sshHost');\n    const sshPort = core.getInput('sshPort');\n    const targetDir = core.getInput('targetDir');\n\n    if (!sshHost || !targetDir) {\n      core.setFailed(`Invalid ssh options provided.`);\n      process.exit(1);\n    }\n\n    syncOptions = {\n      sshPrivateKeyPath: sshPrivateKeyPath,\n      sshHost: sshHost,\n      sshPort: sshPort,\n      targetDir: targetDir,\n    };\n  }\n\n  return {\n    baseUrl: serverBaseUrl,\n    destinationPath: destinationPath,\n    paths: config,\n    browserPath: browserPath,\n    shouldSync: shouldSync,\n    syncOptions: syncOptions,\n  };\n}\n"],"mappings":"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","names":["import_url","core","import_core","import_fs","import_path","import_chrome_launcher","getInput","serverBaseUrl","core","destinationPath","configPath","config","fs","browserPath","chromeLauncher","shouldSync","syncOptions","sshPrivateKeyPath","sshHost","sshPort","targetDir","import_critical","import_rsyncwrapper","import_fs","ChromeLauncher","cleanOldCriticalFiles","options","fs","nodeRsync","error","stdout","stderr","cmd","generateCriticalCSS","input","page","pageUrl","criticalDest","getBrowser","main","getInput","err"]}
import{URL as u}from"url";import*as t from"@actions/core";import r from"@actions/core";import l from"node:fs/promises";import{resolve as f}from"path";import{Launcher as d}from"chrome-launcher";var g=async()=>{let e=r.getInput("sshPrivateKey");e||(r.setFailed("Sync enabled, but no sshPrivateKey supplied."),process.exit(1));let s=r.getInput("sshHost");s||(r.setFailed("Sync enabled, but no sshHost supplied."),process.exit(1));let o=r.getInput("sshPort");o||(r.setFailed("Sync enabled, but no sshPort supplied."),process.exit(1));let n=r.getInput("targetDir");n||(r.setFailed("Sync enabled, but no targetDir supplied."),process.exit(1));let i="./key";return e.length&&await l.writeFile(i,`${e}
`,{mode:384,encoding:"utf8"}),(!s||!n)&&(r.setFailed("Invalid ssh options provided."),process.exit(1)),{sshPrivateKey:i,sshHost:s,sshPort:o,targetDir:n}};async function p(){let e=r.getInput("serverBaseUrl");e||(r.setFailed("Need a valid base url."),process.exit(1)),e.substring(-1)!=="/"&&(e+="/");let s=r.getInput("destinationPath");s||(r.setFailed("Need a valid destination path."),process.exit(1));let o=r.getInput("configPath")?f(r.getInput("configPath")):null;o||(r.setFailed("Config file not found or invalid configPath."),process.exit(1));let n=JSON.parse(await l.readFile(o,"utf-8"));n.length||(r.setFailed("Invalid config."),process.exit(1));let i=d.getFirstInstallation(),c=r.getInput("sync")==="true",a=null;return c&&(a=await g()),{baseUrl:e,destinationPath:s,paths:n,browserPath:i,shouldSync:c,syncOptions:a}}import{generate as y}from"critical";import h from"rsyncwrapper";import m from"node:fs/promises";var P=e=>{let s=null;return e.shouldSync&&e.syncOptions!==null&&(s={src:e.destinationPath,dest:`${e.syncOptions.sshHost}:${e.syncOptions.targetDir}`,args:["-azhcvv"],delete:!0,ssh:!0,port:e.syncOptions.sshPort,privateKey:e.syncOptions.sshPrivateKey}),s},v=async e=>{t.startGroup("Clean up"),await m.mkdir(e.src),h(e,(s,o,n,i)=>{s?(t.error(s),t.error(o),t.error(n),t.error(i),process.exit(1)):(t.info("Rsync cleanup finished"),t.info(o))}),t.endGroup()},S=async e=>{for(let s of e.paths){let o=new u(`${e.baseUrl}${s.url}`),n=e.destinationPath+s.template+"_critical.min.css";t.info(`Generating critical CSS: ${o.href} -> ${n}`),await y({src:o.href,target:n,inline:!1,penthouse:{chromeFlags:{}},ignore:[],dimensions:[{width:375,height:667},{width:1440,height:1280}]})}},b=async()=>{var o;t.startGroup("Action config");let e=await p();process.env.PUPPETEER_EXECUTABLE_PATH=e.browserPath;let s=P(e);t.endGroup(),s!==null&&await v(s),t.startGroup("Start Critical CSS"),await S(e),t.endGroup(),e.shouldSync&&s!==null&&(t.startGroup(`Starting Rsync ${e.destinationPath} -> ${(o=e==null?void 0:e.syncOptions)==null?void 0:o.targetDir}`),h(s,(n,i,c,a)=>{n?(t.error(n),t.error(i),t.error(c),t.error(a),process.exit(1)):(t.info("Rsync finished"),t.info(i))}),t.endGroup())};b().catch(e=>{t.setFailed(e.message),process.exit(1)}).then(()=>t.debug(`done in ${process.uptime()}s`));
//# sourceMappingURL=index.js.map
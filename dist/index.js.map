{"version":3,"sources":["../src/index.ts","../src/config.ts"],"sourcesContent":["import { URL } from 'url';\nimport * as core from '@actions/core';\nimport { getInput } from './config';\nimport { generate } from 'critical';\nimport nodeRsync from 'rsyncwrapper';\nimport fs from 'node:fs/promises';\n\nconst getRsyncOptions = (input: Config): RsyncOptions | null => {\n\n  let options: RsyncOptions | null = null;\n\n  if (input.shouldSync && input.syncOptions !== null) {\n    options = {\n      src: input.destinationPath,\n      dest: `${input.syncOptions.sshHost}:${input.syncOptions.targetDir}`,\n      args: ['-azhcvv'],\n      delete: true,\n      ssh: true,\n      port: input.syncOptions.sshPort,\n      privateKey: input.syncOptions.sshPrivateKey\n    };\n  }\n  return options;\n};\n\nconst cleanOldCriticalFiles = async (options: RsyncOptions) => {\n  core.startGroup('Clean up');\n  await fs.mkdir(options.src);\n  nodeRsync(\n    options,\n    (error, stdout, stderr, cmd) => {\n      if (error) {\n        core.error(error);\n        core.error(stdout);\n        core.error(stderr);\n        core.error(cmd);\n        process.exit(1);\n      } else {\n        core.info('Rsync cleanup finished');\n        core.info(stdout);\n      }\n    }\n  );\n  core.endGroup();\n};\n\nconst generateCriticalCSS = async (input: Config) => {\n  for (let page of input.paths) {\n    const pageUrl = new URL(`${input.baseUrl}${page.url}`);\n    const criticalDest =\n      input.destinationPath + page.template + '_critical.min.css';\n\n    core.info(`Generating critical CSS: ${pageUrl.href} -> ${criticalDest}`);\n\n    await generate({\n      src: pageUrl.href,\n      target: criticalDest,\n      inline: false,\n      penthouse: {\n        chromeFlags: {}\n      },\n      ignore: [],\n      //   minify: true,\n      dimensions: [\n        {\n          width: 375,\n          height: 667\n        },\n        {\n          width: 1440,\n          height: 1280\n        }\n      ]\n    });\n  }\n};\n\nconst main = async () => {\n  core.startGroup('Action config');\n  const input = await getInput();\n  process.env.PUPPETEER_EXECUTABLE_PATH = input.browserPath;\n\n  let rsyncOptions = getRsyncOptions(input);\n\n  core.endGroup(); // Action config\n\n  if (rsyncOptions !== null) {\n    await cleanOldCriticalFiles(rsyncOptions);\n  }\n\n  core.startGroup('Start Critical CSS');\n  await generateCriticalCSS(input);\n  core.endGroup();\n\n  if (input.shouldSync && rsyncOptions !== null) {\n    core.startGroup(\n      `Starting Rsync ${input.destinationPath} -> ${input?.syncOptions?.targetDir}`\n    );\n\n    nodeRsync(\n      rsyncOptions,\n      (error, stdout, stderr, cmd) => {\n        if (error) {\n          core.error(error);\n          core.error(stdout);\n          core.error(stderr);\n          core.error(cmd);\n          process.exit(1);\n        } else {\n          core.info('Rsync finished');\n          core.info(stdout);\n        }\n      }\n    );\n    core.endGroup();\n  }\n};\n\nmain()\n  .catch((err) => {\n    core.setFailed(err.message);\n    process.exit(1);\n  })\n  .then(() => core.debug(`done in ${process.uptime()}s`));\n","import core from '@actions/core';\nimport fs from 'node:fs/promises';\nimport { resolve } from 'path';\nimport { Launcher as chromeLauncher } from 'chrome-launcher';\n\nconst getSyncOptions = async () => {\n  const sshPrivateKey = core.getInput('sshPrivateKey');\n  if (!sshPrivateKey) {\n    // Fail and exit\n    core.setFailed(`Sync enabled, but no sshPrivateKey supplied.`);\n    process.exit(1);\n  }\n\n  const sshHost = core.getInput('sshHost');\n  if (!sshHost) {\n    // Fail and exit\n    core.setFailed(`Sync enabled, but no sshHost supplied.`);\n    process.exit(1);\n  }\n  const sshPort = core.getInput('sshPort');\n  if (!sshPort) {\n    // Fail and exit\n    core.setFailed(`Sync enabled, but no sshPort supplied.`);\n    process.exit(1);\n  }\n  const targetDir = core.getInput('targetDir');\n  if (!targetDir) {\n    // Fail and exit\n    core.setFailed(`Sync enabled, but no targetDir supplied.`);\n    process.exit(1);\n  }\n\n  // Generate private key for rsync\n  const sshKeyPath = './key';\n  if (sshPrivateKey.length) {\n    await fs.writeFile(sshKeyPath, `${sshPrivateKey}\\n`, {\n      mode: 0o600,\n      encoding: 'utf8'\n    });\n  }\n\n  if (!sshHost || !targetDir) {\n    core.setFailed(`Invalid ssh options provided.`);\n    process.exit(1);\n  }\n\n  return {\n    sshPrivateKey: sshKeyPath,\n    sshHost: sshHost,\n    sshPort: sshPort,\n    targetDir: targetDir\n  };\n};\n\nexport async function getInput(): Promise<Config> {\n  let serverBaseUrl = core.getInput('serverBaseUrl');\n  if (!serverBaseUrl) {\n    // Fail and exit\n    core.setFailed(`Need a valid base url.`);\n    process.exit(1);\n  }\n\n  // Make sure we end with a '/'\n  if (serverBaseUrl.substring(-1) !== '/') {\n    serverBaseUrl += '/';\n  }\n\n  const destinationPath = core.getInput('destinationPath');\n  if (!destinationPath) {\n    // Fail and exit\n    core.setFailed(`Need a valid destination path.`);\n    process.exit(1);\n  }\n\n  const configPath = core.getInput('configPath')\n    ? resolve(core.getInput('configPath'))\n    : null;\n\n  if (!configPath) {\n    // Fail and exit\n    core.setFailed(`Config file not found or invalid configPath.`);\n    process.exit(1);\n  }\n  const config = JSON.parse(await fs.readFile(configPath, 'utf-8'));\n  if (!config.length) {\n    core.setFailed(`Invalid config.`);\n    process.exit(1);\n  }\n\n  const browserPath = chromeLauncher.getFirstInstallation();\n\n\n  const shouldSync = core.getInput('sync') === 'true';\n\n  let syncOptions = null;\n  if (shouldSync) {\n    syncOptions = await getSyncOptions();\n  }\n\n  return {\n    baseUrl: serverBaseUrl,\n    destinationPath: destinationPath,\n    paths: config,\n    browserPath: browserPath,\n    shouldSync: shouldSync,\n    syncOptions: syncOptions\n  };\n}"],"mappings":"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","names":["URL","core","core","fs","resolve","chromeLauncher","getSyncOptions","sshPrivateKey","sshHost","sshPort","targetDir","sshKeyPath","getInput","serverBaseUrl","destinationPath","configPath","config","browserPath","shouldSync","syncOptions","generate","nodeRsync","fs","getRsyncOptions","input","options","cleanOldCriticalFiles","error","stdout","stderr","cmd","generateCriticalCSS","page","pageUrl","URL","criticalDest","main","_a","getInput","rsyncOptions","err"]}